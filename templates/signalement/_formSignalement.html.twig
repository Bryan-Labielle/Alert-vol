<div id="annonce-form">
    {{ form_start(form) }}
    {{ form_widget(form) }}
    <h3>Message</h3>
<div class="category">
    {{ form_row(form.message.content) }}
</div>

<div id="zipField">
    <ul id="autocomplete_zip">
    </ul>
</div>
<div class="container" style="margin: auto; display: flex; justify-content: space-evenly">
    <button class="btn btn-primary">{{ button_label|default('Save') }}</button>
</div>
</div>
{# <h3>{{ form_label(form.messages) }}</h3>
{% dump(form.messages) %} #}
    {# <ul class="messages" data-prototype="{{ form_widget(form.messages.vars.prototype)|e('html_attr') }}">
    {% for message in form.messages %}
        <li>
            {{ form_row(message.content) }}
        </li>
    {% endfor %}
    </ul>
    <button type="button" class="add_item_link" data-collection-holder-class="messages">Ajouter un message</button>
    <button class="btn">{{ button_label|default('Save') }}</button> #}
{{ form_end(form) }}
{% if formUpload is defined %}
<div id="upload-form">
    {{ form_start(formUpload) }}
    {{ form_widget(formUpload) }}
    <div class="container" style="margin: auto; display: flex; justify-content: space-evenly">
        <button class="btn btn-primary">{{ button_label|default('Save') }}</button>
    </div>
    {{ form_end(formUpload) }}
</div>
{% endif %}
<script>
    document.addEventListener('DOMContentLoaded',  () => {
        document.getElementById('annonce_location').addEventListener('input', (event) => {
            const search = event.target.value;

            fetch(`/annonce/autocomplete-zip?search=${search}`)

                .then((response) => response.json())

                .then((data) => {
                    console.log(data);
                    let list = '';
                    if (data.length === 0) {
                        // si le champs texte est vide, on cache les suggestions
                        document.getElementById('autocomplete_zip').hide();
                    } else {
                        for (const item of data) {
                            list += `<li>${item.code} . ${item.nom}</li>`;
                        }
                        document.getElementById('autocomplete_zip').innerHTML = list;
                    }
                });

            // .catch(alert('Pas de programmes avec ce nom'));
        });
    });
{# function addFormToCollection($collectionHolderClass) {
                // Get the ul that holds the collection of tags

                let $collectionHolder = document.querySelector('.' + $collectionHolderClass);

                // Get the data-prototype explained earlier
                var prototype = $collectionHolder.getAttribute('data-prototype');

                // get the new index
                var index = parseInt($collectionHolder.getAttribute('index'));
                var newForm = prototype;
                newForm = newForm.replace(/__name__/g, index);
                // increase the index with one for the next item
                $collectionHolder.setAttribute('index', index + 1);
                // Display the form in the page in an li, before the "Add a tag" link li
                let $li = document.createElement('li');
                $li.innerHTML = newForm;
                // Add the new form at the end of the list
                $collectionHolder.appendChild($li)
            }

            document.addEventListener('DOMContentLoaded', function() {
                // Get the ul that holds the collection of tags
                let $tagsCollectionHolder = document.querySelector('ul.content');
                // count the current form inputs we have (e.g. 2), use that as the new
                // index when inserting a new item (e.g. 2)
                let $index = $tagsCollectionHolder.querySelectorAll('input').length
                $tagsCollectionHolder.setAttribute('index', $index);

                let $buttons = document.querySelectorAll('.add_item_link');
                $buttons.forEach(function($button){
                    $button.addEventListener('click', function(e) {
                        let $collectionHolderClass = e.target.getAttribute('data-collection-holder-class');
                        // add a new tag form (see next code block)
                        addFormToCollection($collectionHolderClass);
                    })
                })

            }); #}
</script>
